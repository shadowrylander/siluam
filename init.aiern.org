#+setupfile: ./settings/TANGLE.org
#+include: ./settings/README.org

* আবারো স্বাগতম! Hello Again!

Step 4 of my version of a literate configuration for [[https://www.gnu.org/software/emacs/][GNU Emacs]].

* Mama Mia!
** It's fun to stay at the E.X.W.M.

First, we'll set the warning level to emergencies only until after initialization:

#+begin_src emacs-lisp
(setq meq/var/warning-minimum-level warning-minimum-level)
(setq warning-minimum-level :emergency)
(add-hook 'exwm-init-hook #'(lambda nil (interactive)
    (setq warning-minimum-level meq/var/warning-minimum-level)))
#+end_src

This sets up and requires the [[https://github.com/ch11ng/exwm][Emacs X Window Manager]] by
[[https://github.com/ch11ng][Chris Feng]] for all profiles:

#+begin_src emacs-lisp
(meq/leaf exwm
#+end_src

I want to run the following applications on ~EXWM~ startup:
- [[https://github.com/alacritty/alacritty][Alacritty]]
- [[https://obsidian.md/][Obsidian]]

#+begin_src emacs-lisp
    :hook (exwm-init . post-exwm)
    :config
        (defun post-exwm nil (interactive)
            (unless (member "--profile-exwm" command-line-args)
                (unless (get-buffer "Alacritty") (meq/run "alacritty"))
                (unless (get-buffer "obsidian") (meq/run "obsidian"))))
#+end_src

If the user wants to use a different ~exwm~ config, pass it in on the command-line using ~--profile-exwm~:

#+begin_src emacs-lisp
        (meq/if-item-in-cla "--profile-exwm" (meq/load-from-cla "--profile-exwm" t)
#+end_src

Load the ~fringe~ package and
[[https://github.com/lujun9972/el-dmenu/blob/e8cc9b27c79d3ecc252267c082ab8e9c82eab264/dmenu.el][dmenu]]:

#+begin_src emacs-lisp
            (meq/leaf fringe :config
                                ;; (fringe-mode (quote (1 . 1)) nil (fringe))
                                ;; (fringe-mode '(3 . 0))
                                ;; (fringe-mode 'none)
                                ;; (fringe-mode 1)
                                )
            (meq/leaf dmenu)
#+end_src

#+begin_src emacs-lisp
            (require 'scroll-bar)
            ;; Adapted From: https://github.com/ch11ng/exwm/blob/master/exwm-config.el#L34
            (require 'exwm-config)
            ;; Set the initial workspace number.
            (unless (get 'exwm-workspace-number 'saved-value)
                (setq exwm-workspace-number 4))
            ;; Make class name the buffer name
            (add-hook 'exwm-update-class-hook #'(lambda nil (interactive)
                        (exwm-workspace-rename-buffer exwm-class-name)))
            ;; Global keybindings.
            (unless (get 'exwm-input-global-keys 'saved-value)
                (setq exwm-input-global-keys
                    `(
#+end_src

These keybindings will run my major-mode-based deino, i.e. the ~exwm-global~ deino in this case:

#+begin_src emacs-lisp
                        ([?\s-p] . uru)
                        ([?\s-`] . uru)
                        ([?\s-z] . uru)
#+end_src

Switch buffers quickly:

#+begin_src emacs-lisp
                        (,(naked "s-tab") . next-buffer)
                        (,(naked "s-<iso-lefttab>") . previous-buffer)
                        (,(naked "M-s-tab") . previous-buffer)
#+end_src

~[s]uper-q~ will activate my buffer deino:

#+begin_src emacs-lisp
                        ([?\s-q] . deino-buffer/body)
#+end_src

#+begin_src emacs-lisp
                        ;; 's-N': Switch to certain workspace.
                        ,@(mapcar (lambda (i)
                                    `(,(kbd (format "s-%d" i)) .
                                    (lambda ()
                                        (interactive)
                                        (exwm-workspace-switch-create ,i))))
                                (number-sequence 0 9)))))
            ;; Line-editing shortcuts
            (unless (get 'exwm-input-simulation-keys 'saved-value)
                (setq exwm-input-simulation-keys
                    '(([?\C-b] . [left])
                        ([?\C-f] . [right])
                        ([?\C-p] . [up])
                        ([?\C-n] . [down])
                        ([?\C-a] . [home])
                        ([?\C-e] . [end])
                        ([?\M-v] . [prior])
                        ([?\C-v] . [next])
                        ([?\C-d] . [delete])
                        ([?\C-k] . [S-end delete]))))
            ;; Enable EXWM
            (exwm-enable)
            ;; Configure Ido
            (exwm-config-ido)
            ;; Other configurations
            (exwm-config-misc)

            ;; (exwm-config-default)
            ;; (exwm-enable)

            (meq/which-key-change-ryo "e" "exwm")
#+end_src

This is my general ~exwm~ deino, leading to all the other ~exwm~ deinos:

#+begin_src emacs-lisp
            (defdeino deino-exwm nil "e e"
                ("`" nil "cancel")
                ("XF86PowerOff" deino-exwm/power/body "power")
                ("s" deino-exwm/shells/body "shells"))
#+end_src

I can reboot, power off, and suspend using this one:

#+begin_src emacs-lisp
            (defdeino deino-exwm/power (:color blue) "e p"
                ("r" (meq/run "reboot") "reboot")
                ("q" (meq/run "poweroff") "poweroff")
                ("XF86PowerOff" (meq/run "systemctl suspend" "suspend") "suspend"))
#+end_src

And run my shells and terminals using this one:

#+begin_src emacs-lisp
            (defdeino deino-exwm/shells (:color blue) "e s"
                ("a" (meq/run "alacritty") "alacritty"))
#+end_src

I use the power button to trigger the general ~exwm~ deino:

#+begin_src emacs-lisp
            (alloy-def :keymaps demon-run (naked "XF86PowerOff") 'deino-exwm/body)
#+end_src

And finally, here's the global ~exwm~ deino, triggered by [[https://github.com/shadowrylander/uru][uru]]:

#+begin_src emacs-lisp
            (defuru exwm-mode t deino-exwm-global (:color blue) "e g"
                ("`" nil "cancel")
                ("c" exwm-input-release-keyboard "char mode")
                ("l" exwm-input-grab-keyboard "line mode")
                ("r" exwm-reset "reset")
                ("w" exwm-workspace-switch "workspace switch")
                ("i" meq/run-interactive "run")
                ("b" deino-buffer/body "buffers")))
#+end_src

Also, no tiling!

#+begin_src emacs-lisp
    :custom (exwm-manage-force-tiling . t)
        ;; Adapted From: https://www.reddit.com/r/emacs/comments/8yf6dx/key_chords_in_exwm/
        ;; (exwm-input-line-mode-passthrough . t)
    )
#+end_src

** I'm pretty sure I forgot something...

And adapted from the ~README~:

#+begin_quote
These are any last-minute steps before running any specific Emacs profile.
#+end_quote

#+begin_src emacs-lisp
(pcase meq/var/profile-name
    ("patrick" (progn
                    (advice-add #'reload-config :override #'(lambda nil (interactive)
                        (let* ((path (meq/ued-profiles "patrick"))
                                (readme (s-replace-all
                                        (list (cons "~/src/" (meq/mkPath path "src"))
                                            (cons "~/.config/emacs/readme.org" (f-join path "readme.org"))
                                            (cons "~/txt" (meq/mkPath path "txt"))
                                            (cons "~/src" (meq/mkPath path "src"))
                                            (cons "use-package prodigy" "use-package prodigy :disabled t")
                                            (cons "use-package bazel-mode" "use-package bazel")
                                            (cons
                                                ":pin org"
                                                ;; Adapted From: https://www.reddit.com/r/emacs/comments/3ytb6n/a_better_way_to_define_a_new_prefix/
                                                ":pin org :init (define-prefix-command 'meq/patrick-org-map) (global-set-key (kbd \"C-c o\") 'meq/patrick-org-map)"))
                                        (f-read (f-join path "readme.org"))))
                                (init (f-join path "init.org"))
                                (encoding 'utf-8))
                            (f-write
                                "#+property: header-args:emacs-lisp+ :tangle yes\n\n"
                                encoding
                                init)
                            (f-append readme encoding init)
                            (meq/cl init)))))))
#+end_src

** Let 'er rip!

Also adapted from the ~README~:

#+begin_quote
This bit here will load an alternate ~init~ for a profile if ~--profile-init~ is passed on the
command-line, and otherwise, load the profile's usual ~init~ if it exists.
#+end_quote

#+begin_src emacs-lisp
(meq/if-item-in-cla "--profile-init"
    (meq/load-from-cla "--profile-init" nil t)
    (if meq/var/literate-config
        (meq/cl (meq/ued "init.org"))
        (if (string=
                (meq/ued* "init.el")
                (meq/ued "init.el"))
            (error "Sorry! The profile does not seem to be set!")
            (meq/cl (meq/ued "init.el")))))
#+end_src

** A quieter place

Also adapted from the ~README~:

#+begin_quote
If there's an alternate library directory or file the user wants to load,
~--profile-lib~ will do the trick:
#+end_quote

#+begin_src emacs-lisp
(meq/if-item-in-cla "--profile-lib"
    (meq/load-from-cla "--profile-lib" t)
    (let* ((lib (meq/ued (concat meq/var/profile-name ".el"))))
        (when (f-exists? lib)
            (add-to-list 'load-path (meq/ued) t)
            (meq/cl lib))))
#+end_src